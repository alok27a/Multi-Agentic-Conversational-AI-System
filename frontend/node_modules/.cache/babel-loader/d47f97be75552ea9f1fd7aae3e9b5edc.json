{"ast":null,"code":"var _jsxFileName = \"/Users/alokmathur/Documents/Columbia/FTE/Tasks/Okada/Multi-Agentic-Conversational-AI-System/frontend/src/pages/Chat/ChatCounselling.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { Stack, Text, Heading, Input, Flex, InputGroup, InputRightElement, CircularProgress, IconButton, Alert, AlertIcon } from \"@chakra-ui/react\";\nimport Sidebar from \"../../components/Chat/ChatSidebar\"; // Assuming this component exists\n\nimport Breadcrumbs from \"../../components/Utility/Breadcrumbs\"; // Assuming this component exists\n\nimport { TbSend } from \"react-icons/tb\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate for redirection\n// --- Configuration ---\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://127.0.0.1:8000'; // Your backend URL\n\nconst ChatCounselling = () => {\n  _s();\n\n  const [userText, setUserText] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate(); // --- State for User and Session IDs ---\n  // These will be populated from localStorage on component mount.\n\n  const [userId, setUserId] = useState(null);\n  const [sessionId, setSessionId] = useState(null);\n  const chatEndRef = useRef(null); // --- Effect to load user and session info from localStorage ---\n\n  useEffect(() => {\n    const storedUserId = localStorage.getItem('userId');\n    const storedSessionId = localStorage.getItem('sessionId');\n\n    if (storedUserId && storedSessionId) {\n      setUserId(storedUserId);\n      setSessionId(storedSessionId);\n    } else {\n      // If user info is not found, they are not logged in.\n      setError(\"Authentication error: You must be logged in to chat.\"); // Optional: Redirect to login page after a delay\n\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 3000);\n    }\n  }, [navigate]); // Add navigate to dependency array\n  // Effect to scroll to the bottom of the chat on new messages\n\n  useEffect(() => {\n    var _chatEndRef$current;\n\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]); // --- Function to send a message to the backend ---\n\n  const sendMessage = async () => {\n    // Prevent sending if not logged in, no text, or already loading\n    if (!userText.trim() || !userId || !sessionId || loading) return;\n    setLoading(true);\n    setError(null);\n    const newUserMessage = {\n      role: \"user\",\n      content: userText\n    };\n    setMessages(prev => [...prev, newUserMessage]);\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/v1/chat/`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // Use the IDs retrieved from localStorage\n        body: JSON.stringify({\n          user_id: userId,\n          session_id: sessionId,\n          message: userText\n        })\n      });\n\n      if (!response.ok) {\n        const errData = await response.json();\n        throw new Error(errData.detail || `Error: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      const assistantMessage = {\n        role: \"assistant\",\n        content: data.response\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    } catch (err) {\n      const errorMessage = `Sorry, something went wrong. Please try again. Error: ${err.message}`;\n      setError(errorMessage);\n      setMessages(prev => [...prev, {\n        role: \"assistant\",\n        content: errorMessage\n      }]);\n    } finally {\n      setLoading(false);\n      setUserText(\"\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Sidebar, {\n    children: [/*#__PURE__*/_jsxDEV(Breadcrumbs, {\n      links: [\"Home\", \"Dashboard\", \"Counselling\"]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      mt: 8,\n      ml: 4,\n      children: \"Multi-Agentic Conversational AI System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      p: 4,\n      gap: 3,\n      h: \"80vh\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flex: 1,\n        direction: \"column\",\n        pt: 4,\n        bg: \"white\",\n        w: \"full\",\n        p: 8,\n        borderRadius: \"md\",\n        h: \"full\",\n        overflowY: \"scroll\",\n        sx: {\n          '&::-webkit-scrollbar': {\n            width: '0'\n          },\n          'scrollbarWidth': 'none'\n        },\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Flex, {\n          bg: msg.role === \"user\" ? \"blue.100\" : \"red.100\",\n          w: \"fit-content\",\n          maxW: \"80%\",\n          p: 3,\n          m: 1,\n          borderRadius: 5,\n          alignSelf: msg.role === \"user\" ? \"flex-end\" : \"flex-start\",\n          whiteSpace: \"pre-wrap\",\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            color: \"gray.800\",\n            children: msg.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 29\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          ref: chatEndRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), error && !messages.length &&\n      /*#__PURE__*/\n      // Only show main error if chat is empty\n      _jsxDEV(Alert, {\n        status: \"error\",\n        children: [/*#__PURE__*/_jsxDEV(AlertIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 25\n        }, this), error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(InputGroup, {\n        size: \"lg\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          value: userText,\n          disabled: loading || !userId // Disable if not logged in\n          ,\n          onChange: e => setUserText(e.target.value),\n          pr: \"4.5rem\",\n          placeholder: loading ? \"Processing...\" : userId ? \"Ask anything related to your CSV...\" : \"Please log in to start chatting.\",\n          onKeyDown: e => {\n            if (e.key === \"Enter\" && !e.shiftKey) {\n              e.preventDefault();\n              sendMessage();\n            }\n          },\n          as: \"textarea\",\n          rows: 2,\n          resize: \"none\",\n          bg: \"white\",\n          color: \"gray.800\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n          width: \"4.5rem\",\n          h: \"full\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            \"aria-label\": \"Send message\",\n            icon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              isIndeterminate: true,\n              size: \"20px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(TbSend, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 96\n            }, this),\n            isDisabled: loading || !userId,\n            onClick: sendMessage,\n            colorScheme: \"red\",\n            h: \"80%\",\n            mr: 2\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ChatCounselling, \"nWMvKqM1n6MO9ovL8fP9Tqq+vXQ=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ChatCounselling;\nexport default ChatCounselling;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatCounselling\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Stack","Text","Heading","Input","Flex","InputGroup","InputRightElement","CircularProgress","IconButton","Alert","AlertIcon","Sidebar","Breadcrumbs","TbSend","useNavigate","API_BASE_URL","ChatCounselling","userText","setUserText","messages","setMessages","loading","setLoading","error","setError","navigate","userId","setUserId","sessionId","setSessionId","chatEndRef","storedUserId","localStorage","getItem","storedSessionId","setTimeout","current","scrollIntoView","behavior","sendMessage","trim","newUserMessage","role","content","prev","response","fetch","method","headers","body","JSON","stringify","user_id","session_id","message","ok","errData","json","Error","detail","statusText","data","assistantMessage","err","errorMessage","width","map","msg","index","length","e","target","value","key","shiftKey","preventDefault"],"sources":["/Users/alokmathur/Documents/Columbia/FTE/Tasks/Okada/Multi-Agentic-Conversational-AI-System/frontend/src/pages/Chat/ChatCounselling.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport {\n    Stack,\n    Text,\n    Heading,\n    Input,\n    Flex,\n    InputGroup,\n    InputRightElement,\n    CircularProgress,\n    IconButton,\n    Alert,\n    AlertIcon,\n} from \"@chakra-ui/react\";\nimport Sidebar from \"../../components/Chat/ChatSidebar\"; // Assuming this component exists\nimport Breadcrumbs from \"../../components/Utility/Breadcrumbs\"; // Assuming this component exists\nimport { TbSend } from \"react-icons/tb\";\nimport { useNavigate } from \"react-router-dom\"; // Import useNavigate for redirection\n\n// --- Configuration ---\nconst API_BASE_URL = 'http://127.0.0.1:8000'; // Your backend URL\n\nconst ChatCounselling = () => {\n    const [userText, setUserText] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const navigate = useNavigate();\n\n    // --- State for User and Session IDs ---\n    // These will be populated from localStorage on component mount.\n    const [userId, setUserId] = useState(null);\n    const [sessionId, setSessionId] = useState(null);\n    \n    const chatEndRef = useRef(null);\n\n    // --- Effect to load user and session info from localStorage ---\n    useEffect(() => {\n        const storedUserId = localStorage.getItem('userId');\n        const storedSessionId = localStorage.getItem('sessionId');\n\n        if (storedUserId && storedSessionId) {\n            setUserId(storedUserId);\n            setSessionId(storedSessionId);\n        } else {\n            // If user info is not found, they are not logged in.\n            setError(\"Authentication error: You must be logged in to chat.\");\n            // Optional: Redirect to login page after a delay\n            setTimeout(() => {\n                navigate(\"/\"); \n            }, 3000);\n        }\n    }, [navigate]); // Add navigate to dependency array\n\n    // Effect to scroll to the bottom of the chat on new messages\n    useEffect(() => {\n        chatEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n    }, [messages]);\n\n    // --- Function to send a message to the backend ---\n    const sendMessage = async () => {\n        // Prevent sending if not logged in, no text, or already loading\n        if (!userText.trim() || !userId || !sessionId || loading) return; \n        \n        setLoading(true);\n        setError(null);\n\n        const newUserMessage = { role: \"user\", content: userText };\n        setMessages((prev) => [...prev, newUserMessage]);\n\n        try {\n            const response = await fetch(`${API_BASE_URL}/api/v1/chat/`, {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                },\n                // Use the IDs retrieved from localStorage\n                body: JSON.stringify({\n                    user_id: userId,\n                    session_id: sessionId,\n                    message: userText,\n                }),\n            });\n\n            if (!response.ok) {\n                const errData = await response.json();\n                throw new Error(errData.detail || `Error: ${response.statusText}`);\n            }\n\n            const data = await response.json();\n            const assistantMessage = { role: \"assistant\", content: data.response };\n\n            setMessages((prev) => [...prev, assistantMessage]);\n\n        } catch (err) {\n            const errorMessage = `Sorry, something went wrong. Please try again. Error: ${err.message}`;\n            setError(errorMessage);\n            setMessages((prev) => [\n                ...prev,\n                { role: \"assistant\", content: errorMessage },\n            ]);\n        } finally {\n            setLoading(false);\n            setUserText(\"\");\n        }\n    };\n\n    return (\n        <Sidebar>\n            <Breadcrumbs links={[\"Home\", \"Dashboard\", \"Counselling\"]} />\n            <Heading mt={8} ml={4}>\n                Multi-Agentic Conversational AI System\n            </Heading>\n            <Stack p={4} gap={3} h=\"80vh\">\n                <Flex\n                    flex={1}\n                    direction=\"column\"\n                    pt={4}\n                    bg=\"white\"\n                    w=\"full\"\n                    p={8}\n                    borderRadius=\"md\"\n                    h=\"full\"\n                    overflowY=\"scroll\"\n                    sx={{\n                        '&::-webkit-scrollbar': { width: '0' },\n                        'scrollbarWidth': 'none',\n                    }}\n                >\n                    {messages.map((msg, index) => (\n                        <Flex\n                            key={index}\n                            bg={msg.role === \"user\" ? \"blue.100\" : \"red.100\"}\n                            w=\"fit-content\"\n                            maxW=\"80%\"\n                            p={3}\n                            m={1}\n                            borderRadius={5}\n                            alignSelf={msg.role === \"user\" ? \"flex-end\" : \"flex-start\"}\n                            whiteSpace=\"pre-wrap\"\n                        >\n                            <Text color=\"gray.800\">{msg.content}</Text>\n                        </Flex>\n                    ))}\n                    <div ref={chatEndRef} />\n                </Flex>\n                {error && !messages.length && ( // Only show main error if chat is empty\n                    <Alert status=\"error\">\n                        <AlertIcon />\n                        {error}\n                    </Alert>\n                )}\n                <InputGroup size=\"lg\">\n                    <Input\n                        value={userText}\n                        disabled={loading || !userId} // Disable if not logged in\n                        onChange={(e) => setUserText(e.target.value)}\n                        pr=\"4.5rem\"\n                        placeholder={\n                            loading ? \"Processing...\" : (userId ? \"Ask anything related to your CSV...\" : \"Please log in to start chatting.\")\n                        }\n                        onKeyDown={(e) => {\n                            if (e.key === \"Enter\" && !e.shiftKey) {\n                                e.preventDefault();\n                                sendMessage();\n                            }\n                        }}\n                        as=\"textarea\"\n                        rows={2}\n                        resize=\"none\"\n                        bg=\"white\"\n                        color=\"gray.800\"\n                    />\n                    <InputRightElement width=\"4.5rem\" h=\"full\">\n                        <IconButton\n                            aria-label=\"Send message\"\n                            icon={loading ? <CircularProgress isIndeterminate size=\"20px\" /> : <TbSend />}\n                            isDisabled={loading || !userId}\n                            onClick={sendMessage}\n                            colorScheme=\"red\"\n                            h=\"80%\"\n                            mr={2}\n                        />\n                    </InputRightElement>\n                </InputGroup>\n            </Stack>\n        </Sidebar>\n    );\n};\n\nexport default ChatCounselling;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SACIC,KADJ,EAEIC,IAFJ,EAGIC,OAHJ,EAIIC,KAJJ,EAKIC,IALJ,EAMIC,UANJ,EAOIC,iBAPJ,EAQIC,gBARJ,EASIC,UATJ,EAUIC,KAVJ,EAWIC,SAXJ,QAYO,kBAZP;AAaA,OAAOC,OAAP,MAAoB,mCAApB,C,CAAyD;;AACzD,OAAOC,WAAP,MAAwB,sCAAxB,C,CAAgE;;AAChE,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CAAgD;AAEhD;;;AACA,MAAMC,YAAY,GAAG,uBAArB,C,CAA8C;;AAE9C,MAAMC,eAAe,GAAG,MAAM;EAAA;;EAC1B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACsB,QAAD,EAAWC,WAAX,IAA0BvB,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACwB,OAAD,EAAUC,UAAV,IAAwBzB,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAAC0B,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM4B,QAAQ,GAAGX,WAAW,EAA5B,CAL0B,CAO1B;EACA;;EACA,MAAM,CAACY,MAAD,EAASC,SAAT,IAAsB9B,QAAQ,CAAC,IAAD,CAApC;EACA,MAAM,CAAC+B,SAAD,EAAYC,YAAZ,IAA4BhC,QAAQ,CAAC,IAAD,CAA1C;EAEA,MAAMiC,UAAU,GAAG/B,MAAM,CAAC,IAAD,CAAzB,CAZ0B,CAc1B;;EACAD,SAAS,CAAC,MAAM;IACZ,MAAMiC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqB,QAArB,CAArB;IACA,MAAMC,eAAe,GAAGF,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAxB;;IAEA,IAAIF,YAAY,IAAIG,eAApB,EAAqC;MACjCP,SAAS,CAACI,YAAD,CAAT;MACAF,YAAY,CAACK,eAAD,CAAZ;IACH,CAHD,MAGO;MACH;MACAV,QAAQ,CAAC,sDAAD,CAAR,CAFG,CAGH;;MACAW,UAAU,CAAC,MAAM;QACbV,QAAQ,CAAC,GAAD,CAAR;MACH,CAFS,EAEP,IAFO,CAAV;IAGH;EACJ,CAfQ,EAeN,CAACA,QAAD,CAfM,CAAT,CAf0B,CA8BV;EAEhB;;EACA3B,SAAS,CAAC,MAAM;IAAA;;IACZ,uBAAAgC,UAAU,CAACM,OAAX,4EAAoBC,cAApB,CAAmC;MAAEC,QAAQ,EAAE;IAAZ,CAAnC;EACH,CAFQ,EAEN,CAACnB,QAAD,CAFM,CAAT,CAjC0B,CAqC1B;;EACA,MAAMoB,WAAW,GAAG,YAAY;IAC5B;IACA,IAAI,CAACtB,QAAQ,CAACuB,IAAT,EAAD,IAAoB,CAACd,MAArB,IAA+B,CAACE,SAAhC,IAA6CP,OAAjD,EAA0D;IAE1DC,UAAU,CAAC,IAAD,CAAV;IACAE,QAAQ,CAAC,IAAD,CAAR;IAEA,MAAMiB,cAAc,GAAG;MAAEC,IAAI,EAAE,MAAR;MAAgBC,OAAO,EAAE1B;IAAzB,CAAvB;IACAG,WAAW,CAAEwB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUH,cAAV,CAAX,CAAX;;IAEA,IAAI;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE/B,YAAa,eAAjB,EAAiC;QACzDgC,MAAM,EAAE,MADiD;QAEzDC,OAAO,EAAE;UACL,gBAAgB;QADX,CAFgD;QAKzD;QACAC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;UACjBC,OAAO,EAAE1B,MADQ;UAEjB2B,UAAU,EAAEzB,SAFK;UAGjB0B,OAAO,EAAErC;QAHQ,CAAf;MANmD,CAAjC,CAA5B;;MAaA,IAAI,CAAC4B,QAAQ,CAACU,EAAd,EAAkB;QACd,MAAMC,OAAO,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAtB;QACA,MAAM,IAAIC,KAAJ,CAAUF,OAAO,CAACG,MAAR,IAAmB,UAASd,QAAQ,CAACe,UAAW,EAA1D,CAAN;MACH;;MAED,MAAMC,IAAI,GAAG,MAAMhB,QAAQ,CAACY,IAAT,EAAnB;MACA,MAAMK,gBAAgB,GAAG;QAAEpB,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAEkB,IAAI,CAAChB;MAAnC,CAAzB;MAEAzB,WAAW,CAAEwB,IAAD,IAAU,CAAC,GAAGA,IAAJ,EAAUkB,gBAAV,CAAX,CAAX;IAEH,CAxBD,CAwBE,OAAOC,GAAP,EAAY;MACV,MAAMC,YAAY,GAAI,yDAAwDD,GAAG,CAACT,OAAQ,EAA1F;MACA9B,QAAQ,CAACwC,YAAD,CAAR;MACA5C,WAAW,CAAEwB,IAAD,IAAU,CAClB,GAAGA,IADe,EAElB;QAAEF,IAAI,EAAE,WAAR;QAAqBC,OAAO,EAAEqB;MAA9B,CAFkB,CAAX,CAAX;IAIH,CA/BD,SA+BU;MACN1C,UAAU,CAAC,KAAD,CAAV;MACAJ,WAAW,CAAC,EAAD,CAAX;IACH;EACJ,CA7CD;;EA+CA,oBACI,QAAC,OAAD;IAAA,wBACI,QAAC,WAAD;MAAa,KAAK,EAAE,CAAC,MAAD,EAAS,WAAT,EAAsB,aAAtB;IAApB;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI,QAAC,OAAD;MAAS,EAAE,EAAE,CAAb;MAAgB,EAAE,EAAE,CAApB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAKI,QAAC,KAAD;MAAO,CAAC,EAAE,CAAV;MAAa,GAAG,EAAE,CAAlB;MAAqB,CAAC,EAAC,MAAvB;MAAA,wBACI,QAAC,IAAD;QACI,IAAI,EAAE,CADV;QAEI,SAAS,EAAC,QAFd;QAGI,EAAE,EAAE,CAHR;QAII,EAAE,EAAC,OAJP;QAKI,CAAC,EAAC,MALN;QAMI,CAAC,EAAE,CANP;QAOI,YAAY,EAAC,IAPjB;QAQI,CAAC,EAAC,MARN;QASI,SAAS,EAAC,QATd;QAUI,EAAE,EAAE;UACA,wBAAwB;YAAE+C,KAAK,EAAE;UAAT,CADxB;UAEA,kBAAkB;QAFlB,CAVR;QAAA,WAeK9C,QAAQ,CAAC+C,GAAT,CAAa,CAACC,GAAD,EAAMC,KAAN,kBACV,QAAC,IAAD;UAEI,EAAE,EAAED,GAAG,CAACzB,IAAJ,KAAa,MAAb,GAAsB,UAAtB,GAAmC,SAF3C;UAGI,CAAC,EAAC,aAHN;UAII,IAAI,EAAC,KAJT;UAKI,CAAC,EAAE,CALP;UAMI,CAAC,EAAE,CANP;UAOI,YAAY,EAAE,CAPlB;UAQI,SAAS,EAAEyB,GAAG,CAACzB,IAAJ,KAAa,MAAb,GAAsB,UAAtB,GAAmC,YARlD;UASI,UAAU,EAAC,UATf;UAAA,uBAWI,QAAC,IAAD;YAAM,KAAK,EAAC,UAAZ;YAAA,UAAwByB,GAAG,CAACxB;UAA5B;YAAA;YAAA;YAAA;UAAA;QAXJ,GACSyB,KADT;UAAA;UAAA;UAAA;QAAA,QADH,CAfL,eA8BI;UAAK,GAAG,EAAEtC;QAAV;UAAA;UAAA;UAAA;QAAA,QA9BJ;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,EAiCKP,KAAK,IAAI,CAACJ,QAAQ,CAACkD,MAAnB;MAAA;MAA+B;MAC5B,QAAC,KAAD;QAAO,MAAM,EAAC,OAAd;QAAA,wBACI,QAAC,SAAD;UAAA;UAAA;UAAA;QAAA,QADJ,EAEK9C,KAFL;MAAA;QAAA;QAAA;QAAA;MAAA,QAlCR,eAuCI,QAAC,UAAD;QAAY,IAAI,EAAC,IAAjB;QAAA,wBACI,QAAC,KAAD;UACI,KAAK,EAAEN,QADX;UAEI,QAAQ,EAAEI,OAAO,IAAI,CAACK,MAF1B,CAEkC;UAFlC;UAGI,QAAQ,EAAG4C,CAAD,IAAOpD,WAAW,CAACoD,CAAC,CAACC,MAAF,CAASC,KAAV,CAHhC;UAII,EAAE,EAAC,QAJP;UAKI,WAAW,EACPnD,OAAO,GAAG,eAAH,GAAsBK,MAAM,GAAG,qCAAH,GAA2C,kCANtF;UAQI,SAAS,EAAG4C,CAAD,IAAO;YACd,IAAIA,CAAC,CAACG,GAAF,KAAU,OAAV,IAAqB,CAACH,CAAC,CAACI,QAA5B,EAAsC;cAClCJ,CAAC,CAACK,cAAF;cACApC,WAAW;YACd;UACJ,CAbL;UAcI,EAAE,EAAC,UAdP;UAeI,IAAI,EAAE,CAfV;UAgBI,MAAM,EAAC,MAhBX;UAiBI,EAAE,EAAC,OAjBP;UAkBI,KAAK,EAAC;QAlBV;UAAA;UAAA;UAAA;QAAA,QADJ,eAqBI,QAAC,iBAAD;UAAmB,KAAK,EAAC,QAAzB;UAAkC,CAAC,EAAC,MAApC;UAAA,uBACI,QAAC,UAAD;YACI,cAAW,cADf;YAEI,IAAI,EAAElB,OAAO,gBAAG,QAAC,gBAAD;cAAkB,eAAe,MAAjC;cAAkC,IAAI,EAAC;YAAvC;cAAA;cAAA;cAAA;YAAA,QAAH,gBAAsD,QAAC,MAAD;cAAA;cAAA;cAAA;YAAA,QAFvE;YAGI,UAAU,EAAEA,OAAO,IAAI,CAACK,MAH5B;YAII,OAAO,EAAEa,WAJb;YAKI,WAAW,EAAC,KALhB;YAMI,CAAC,EAAC,KANN;YAOI,EAAE,EAAE;UAPR;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA,QArBJ;MAAA;QAAA;QAAA;QAAA;MAAA,QAvCJ;IAAA;MAAA;MAAA;MAAA;IAAA,QALJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAiFH,CAtKD;;GAAMvB,e;UAKeF,W;;;KALfE,e;AAwKN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}